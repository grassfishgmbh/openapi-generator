{{>licenseInfo}}
#ifndef {{prefix}}_{{classname}}_H
#define {{prefix}}_{{classname}}_H

#include "{{prefix}}HttpRequest.h"
#include "{{prefix}}Helpers.h"
#include "{{prefix}}ClientConfig.h"

{{#imports}}{{{import}}}
{{/imports}}

#include <QObject>
#include <QSharedPointer>

{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

{{#operations}}{{#operation}}class {{prefix}}{{operationIdCamelCase}}Reply;
{{/operation}}{{/operations}}
class {{classname}}: public QObject {
    Q_OBJECT

public:
    {{classname}}(QObject * parent = nullptr);
    {{classname}}(QSharedPointer<{{prefix}}ClientConfig> api, QObject * parent = nullptr);
    ~{{classname}}();
    QSharedPointer<{{prefix}}ClientConfig> config() const;
    void setConfig(QSharedPointer<{{prefix}}ClientConfig> config);

    {{#operations}}{{#operation}}QSharedPointer<{{prefix}}{{operationIdCamelCase}}Reply> {{nickname}}({{#allParams}}const {{{dataType}}}& {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    {{/operation}}{{/operations}}
Q_SIGNALS:
    {{#operations}}{{#operation}}void {{nickname}}Signal({{#returnType}}{{{returnType}}} summary{{/returnType}});
    {{/operation}}{{/operations}}
    {{#operations}}{{#operation}}void {{nickname}}SignalFull({{prefix}}HttpRequestWorker* worker{{#returnType}}, {{{returnType}}} summary{{/returnType}});
    {{/operation}}{{/operations}}
    {{#operations}}{{#operation}}void {{nickname}}SignalE({{#returnType}}{{{returnType}}} summary, {{/returnType}}QNetworkReply::NetworkError error_type, QString& error_str);
    {{/operation}}{{/operations}}
    {{#operations}}{{#operation}}void {{nickname}}SignalEFull({{prefix}}HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    {{/operation}}{{/operations}}
private:
    QSharedPointer<{{prefix}}ClientConfig> m_config;
};

{{#operations}}{{#operation}}class {{prefix}}{{operationIdCamelCase}}Reply : public {{prefix}}HttpRequestWorker {
    Q_OBJECT
public:
    {{prefix}}{{operationIdCamelCase}}Reply({{classname}} * api, QObject * parent = nullptr);
    virtual void processResult() override;{{#responses}}{{#dataType}}
    {{{dataType}}} {{#isDefault}}result{{/isDefault}}{{^isDefault}}result_{{code}}{{/isDefault}};{{/dataType}}{{/responses}}
    {{classname}} * api;
};

{{/operation}}{{/operations}}
{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
#endif
