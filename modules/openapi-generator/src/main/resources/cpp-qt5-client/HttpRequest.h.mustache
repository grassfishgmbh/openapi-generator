{{>licenseInfo}}
/**
 * Based on http://www.creativepulse.gr/en/blog/2014/restful-api-requests-using-qt-cpp-for-linux-mac-osx-ms-windows
 * By Alex Stylianos
 *
 **/

#ifndef {{prefix}}_HTTPREQUESTWORKER_H
#define {{prefix}}_HTTPREQUESTWORKER_H

#include <QObject>
#include <QString>
#include <QMap>
#include <QNetworkAccessManager>
#include <QNetworkReply>



{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

enum {{prefix}}HttpRequestVarLayout {NOT_SET, ADDRESS, URL_ENCODED, MULTIPART};

class {{prefix}}HttpRequestInputFileElement {

public:
    QString variable_name;
    QString local_filename;
    QString request_filename;
    QString mime_type;

};


class {{prefix}}HttpRequestInput {

public:
    QString url_str;
    QString http_method;
    {{prefix}}HttpRequestVarLayout var_layout;
    QMap<QString, QString> vars;
    QMap<QString, QString> headers;
    QList<{{prefix}}HttpRequestInputFileElement> files;
    QByteArray request_body;

    {{prefix}}HttpRequestInput();
    {{prefix}}HttpRequestInput(QString v_url_str, QString v_http_method);
    void initialize();
    void add_var(QString key, QString value);
    void add_file(QString variable_name, QString local_filename, QString request_filename, QString mime_type);

};


class {{prefix}}HttpRequestWorker : public QObject {
    Q_OBJECT

public:
    QByteArray rawResponse;
    QNetworkReply * reply = nullptr;
    QNetworkReply::NetworkError error_type;
    QString error_str;

    explicit {{prefix}}HttpRequestWorker(QObject *parent = nullptr);
    virtual ~{{prefix}}HttpRequestWorker();

    virtual void processResult() {}

    QMap<QByteArray, QByteArray> getResponseHeaders() const;
    QString http_attribute_encode(QString attribute_name, QString input);
    void execute({{prefix}}HttpRequestInput &input);
    static QSslConfiguration* sslDefaultConfiguration;

    bool isFinished() const {return reply && reply->isFinished();}
    bool isRunning() const {return reply && reply->isRunning();}
    QNetworkRequest rawRequest() const {return reply ? reply->request() : QNetworkRequest();}
    int httpStatusCode() const {return reply ? reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt() : 0;}
    bool isValid() const {return isFinished() && error_type==QNetworkReply::NoError && httpStatusCode() < 400;} 

Q_SIGNALS:
    void finished();
    void error(QNetworkReply::NetworkError code);

private:
    QNetworkAccessManager *manager;
    QMap<QByteArray, QByteArray> headers;
private Q_SLOTS:
    void on_reply_finished();

};

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}

#endif // {{prefix}}_HTTPREQUESTWORKER_H
