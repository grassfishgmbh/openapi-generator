{{>licenseInfo}}
#include "{{classname}}.h"
#include "{{prefix}}Helpers.h"

#include <QJsonArray>
#include <QJsonDocument>
#include <QRegularExpression>

{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

{{classname}}::{{classname}}(QObject * parent) : QObject(parent) {}

{{classname}}::~{{classname}}() {}

{{classname}}::{{classname}}({{prefix}}ClientConfig const &config, QObject * parent) : QObject(parent), config(config) {}

{{#operations}}
{{#operation}}
QSharedPointer<{{prefix}}{{operationIdCamelCase}}Reply> 
{{classname}}::{{nickname}}({{#allParams}}const {{{dataType}}}& {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
    QString fullPath = config.getUrl();
    fullPath.append("{{{path}}}");
    {{#pathParams}}
    QString {{paramName}}PathParam("{"); 
    {{paramName}}PathParam.append("{{baseName}}").append("}");
    fullPath.replace({{paramName}}PathParam, QUrl::toPercentEncoding(::{{cppNamespace}}::toStringValue({{paramName}})));
    {{/pathParams}}
    {{#queryParams}}{{^collectionFormat}}
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("{{baseName}}"))
        .append("=")
        .append(QUrl::toPercentEncoding(::{{cppNamespace}}::toStringValue({{paramName}})));
    {{/collectionFormat}}{{#collectionFormat}}
    if ({{{paramName}}}.size() > 0) {
      if (QString("{{collectionFormat}}").indexOf("multi") == 0) {
        Q_FOREACH({{{baseType}}} t, qAsConst({{paramName}})) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("{{{baseName}}}=").append(::{{cppNamespace}}::toStringValue(t));
        }
      }
      else if (QString("{{collectionFormat}}").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("{{baseName}}=");
        qint32 count = 0;
        Q_FOREACH({{{baseType}}} t, qAsConst({{paramName})}) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(::{{cppNamespace}}::toStringValue(t));
        }
      }
      else if (QString("{{collectionFormat}}").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("{{baseName}}=");
        qint32 count = 0;
        Q_FOREACH({{{baseType}}} t, qAsConst({{paramName}})) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(::{{cppNamespace}}::toStringValue(t));
        }
      }
    }
    {{/collectionFormat}}{{/queryParams}}
    QSharedPointer<{{prefix}}{{operationIdCamelCase}}Reply> worker(new {{prefix}}{{operationIdCamelCase}}Reply(this, this), &QObject::deleteLater);
    {{prefix}}HttpRequestInput input(fullPath, "{{httpMethod}}");
    {{#formParams}}
    if ({{paramName}} != nullptr) {
        {{^isFile}}input.add_var("{{baseName}}", {{paramName}});{{/isFile}}{{#isFile}}input.add_file("{{baseName}}", (*{{paramName}}).local_filename, (*{{paramName}}).request_filename, (*{{paramName}}).mime_type);{{/isFile}}
    }
    {{/formParams}}{{#bodyParams}}
    {{#isContainer}}{{#isListContainer}}
    QJsonDocument doc(::{{cppNamespace}}::toJsonValue({{paramName}}).toArray());{{/isListContainer}}{{#isMapContainer}}
    QJsonDocument doc(::{{cppNamespace}}::toJsonValue({{paramName}}).toObject());{{/isMapContainer}}
    QByteArray bytes = doc.toJson();
    input.request_body.append(bytes);
    {{/isContainer}}{{^isContainer}}{{#isString}}
    QString output({{paramName}});{{/isString}}{{#isByteArray}}QString output({{paramName}});{{/isByteArray}}{{^isString}}{{^isByteArray}}
    QString output = {{paramName}}.asJson();{{/isByteArray}}{{/isString}}
    input.request_body.append(output);
    {{/isContainer}}{{/bodyParams}}
    {{#headerParams}}
    if ({{paramName}} != nullptr) {
        input.headers.insert("{{baseName}}", {{paramName}});
    }
    {{/headerParams}}
    {{#authMethods}}// TODO: complete authMethods support
    {{#isKeyInHeader}}
    if (config.headerAuth.contains("{{keyParamName}}")) input.headers.insert("{{keyParamName}}", config.headerAuth["{{keyParamName}}"]);
    {{/isKeyInHeader}}{{/authMethods}}
    
    foreach(QString key, config.defaultHeaders.keys()) {
        input.headers.insert(key, config.defaultHeaders.value(key));
    }

    worker->execute(input);
    connect(worker.data(), &{{prefix}}{{operationIdCamelCase}}Reply::finished, this, [worker]() mutable {
        worker.clear(); // keep worker object alive until class-wide response signal can be emitted
    });
    return worker;
}

{{prefix}}{{operationIdCamelCase}}Reply::{{prefix}}{{operationIdCamelCase}}Reply({{classname}} * api, QObject * parent ) : {{prefix}}HttpRequestWorker(parent), api(api) {}
void {{prefix}}{{operationIdCamelCase}}Reply::processResult() {
    switch (httpStatusCode()) { {{#responses}}
    case {{code}}: {{#wildcard}}
    default: {{/wildcard}}{{#dataType}}{{#isListContainer}}
        {
            QJsonDocument doc = QJsonDocument::fromJson(rawResponse);
            ::{{cppNamespace}}::fromJsonValue({{#isDefault}}result{{/isDefault}}{{^isDefault}}result_{{code}}{{/isDefault}}, doc.array());
        }
        {{/isListContainer}}{{^isListContainer}}{{^isMapContainer}}{{#primitiveType}}
        ::{{cppNamespace}}::fromStringValue(QString(rawResponse), {{#isDefault}}result{{/isDefault}}{{^isDefault}}result_{{code}}{{/isDefault}});{{#isString}}
        result.replace(QRegularExpression("^\"(.*)\"$"), "\\1");{{/isString}}{{/primitiveType}}{{/isMapContainer}}{{#isMapContainer}}
        {
            QJsonDocument doc = QJsonDocument::fromJson(rawResponse);
            ::{{cppNamespace}}::fromJsonValue({{#isDefault}}result{{/isDefault}}{{^isDefault}}result_{{code}}{{/isDefault}}, doc.object());
        }
        {{/isMapContainer}}{{^isMapContainer}}{{^primitiveType}}
        {{#isDefault}}result{{/isDefault}}{{^isDefault}}result_{{code}}{{/isDefault}} = {{{dataType}}}(QString(rawResponse));{{/primitiveType}}{{/isMapContainer}}
        {{/isListContainer}}{{/dataType}}
        break;{{/responses}}
    }

    if (error_type == QNetworkReply::NoError) {
        Q_EMIT api->{{nickname}}Signal({{#returnType}}result{{/returnType}});
        Q_EMIT api->{{nickname}}SignalFull(this{{#returnType}}, result{{/returnType}});
    } else {
        Q_EMIT api->{{nickname}}SignalE({{#returnType}}result, {{/returnType}}error_type, error_str);
        Q_EMIT api->{{nickname}}SignalEFull(this, error_type, error_str);
    }
}

{{/operation}}
{{/operations}}

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
